# Copyright 2022 by Andrey Ignatov. All Rights Reserved.

import numpy as np
import tensorflow.compat.v1 as tf
import tensorflow_addons as tfa
import imageio
import sys
import os
import importlib
import rawpy
import cv2
from tensorflow.keras.models import load_model
import argparse

from load_dataset import extract_bayer_channels

IMAGE_HEIGHT, IMAGE_WIDTH = 1472, 1984
DSLR_SCALE = 2


dataset_dir = 'raw_images/test/'
dslr_dir = 'canon/'
phone_dir = 'huawei_full_resolution/'

def extract_bayer_channels(raw):

    # Reshape the input bayer image
    ch_B  = raw[1::2, 1::2]
    ch_Gb = raw[0::2, 1::2]
    ch_R  = raw[0::2, 0::2]
    ch_Gr = raw[1::2, 0::2]

    RAW_combined = np.dstack((ch_B, ch_Gb, ch_R, ch_Gr))
    RAW_norm = RAW_combined.astype(np.float32) / (4 * 255)

    print(RAW_norm.shape)

    return RAW_norm


def main():
    """Test model"""
    parser = argparse.ArgumentParser(
        description='Test model',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        '--model', help='Path to model checkpoint.', type=str, default='models/model.3.best.h5', required=False)
    parser.add_argument(
        '--inp_path', help='Path to the input data.', type=str, default='raw_images/test/huawei_full_resolution/', required=False)
    parser.add_argument(
        '--out_path', help='Path to the output images.', type=str, default='results', required=False)
    args = parser.parse_args()


    spec = importlib.util.spec_from_file_location('pynet.model', 'model.py')
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    PyNET = module.PyNET

    phone_ = tf.keras.Input(shape=(IMAGE_HEIGHT, IMAGE_WIDTH, 4))
    # Loading pre-trained model
    _, enhanced, _, _ = \
        PyNET(phone_, instance_norm=True, instance_norm_level_1=False)


    print("Initializing variables")

    model = tf.keras.Model(inputs=phone_, outputs=enhanced)
    prev_model = load_model(args.model, compile=False)
    for i, layer in enumerate(prev_model.layers):
        for k in model.layers:
            if k.name == layer.name:
                k.set_weights(layer.get_weights())
    

    print("Before saving model")
    tf.saved_model.save(model, 'saved_model')

    print("Before converting")
    # Convert the TensorFlow model to TensorFlow Lite format
    converter = tf.lite.TFLiteConverter.from_saved_model('saved_model')
    tflite_model = converter.convert()

    # Save the converted model to a .tflite file
    with open('model.tflite', 'wb') as f:
        f.write(tflite_model)

    print("After converting")
    # # Processing full-resolution RAW images
    # test_dir = args.inp_path
    # test_photos = [f for f in os.listdir(test_dir) if os.path.isfile(test_dir + f)]
    # print("TEST DIR",  test_dir)
    # print("LEN TEST PHOTOS", len(test_photos))

    # for photo in test_photos:
    #     print("PHOTO PATH:", test_dir + photo)
    #     raw = np.asarray(imageio.imread(test_dir + photo))
    #     # raw = extract_bayer_channels(I)
    #     # with rawpy.imread(test_dir + photo) as raw:
    #     I = extract_bayer_channels(raw)
    #     print("Processing image " + photo)

    #     I = I[0:IMAGE_HEIGHT, 0:IMAGE_WIDTH, :]
    #     I = np.reshape(I, [1, I.shape[0], I.shape[1], 4])

    #     # Run inference

    #     enhanced_tensor = model.predict([I])
    #     enhanced_image = np.reshape(enhanced_tensor, [int(I.shape[1] * DSLR_SCALE), int(I.shape[2] * DSLR_SCALE), 3])

    #     # Save the results as .png images
    #     photo_name = photo.rsplit(".", 1)[0]
    #     enhanced_image = cv2.cvtColor(enhanced_image, cv2.COLOR_RGB2BGR)
    #     enhanced_image = np.uint8(np.clip(enhanced_image, 0.0, 1.0) * 255.0)
    #     cv2.imwrite(os.path.join(args.out_path, photo_name + ".png"), enhanced_image)


if __name__ == '__main__':
    main()
